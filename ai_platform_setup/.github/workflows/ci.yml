name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ${{ vars.DOCKER_HUB_USERNAME }}/AI-PLATFORM:${{ github.sha }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      ENVIRONMENT: development
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Environment Variables
        run: echo "ENVIRONMENT=DEVELOPMENT" >> $GITHUB_ENV

      - name: Set up Logging
        run: |
          mkdir -p logs
          touch logs/ci_cd_pipeline.log

      - name: Export Variables
        run: |
          echo "PROJECT_ROOT=$(pwd)" >> $GITHUB_ENV
          echo "LOG_DIR=$(pwd)/logs" >> $GITHUB_ENV
          echo "LOG_FILE=$(pwd)/logs/ci_cd_pipeline.log" >> $GITHUB_ENV

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Log build details
        run: echo "Built and pushed image ${{ env.IMAGE_NAME }}"

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run Unit Tests
        run: ./src/testing/unit_tests.sh

      - name: Run Integration Tests
        run: ./src/testing/integration_tests.sh

      - name: Run End-to-End Tests
        run: ./src/testing/e2e_tests.sh

  security_scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run Security Scans
        run: ./ci/security-scan.sh

  deploy:
    needs: security_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.21.0'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Apply Kubernetes Manifests
        run: kubectl apply -f ./deploy/

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/nlp-service -n ai-platform
          kubectl rollout status deployment/transformers-service -n ai-platform

  finalize:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'general'  # Or use repository variable
          slack-message: |
            ðŸš€ *Deployment Status Update*
            *ENVIRONMENT:* ${{ vars.ENVIRONMENT }}
            *Status:* âœ… Successfully Deployed
            *VERSION:* $(git describe --tags --always)
            *COMMIT:* ${{ github.sha }}
            *TRIGGERED BY:* ${{ github.actor }}
            *WORKFLOW:* ${{ github.WORKFLOW }}
            *BUILD DETAILS:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            *Health Checks:*
            - NLP Service: âœ…
            - Transformers Service: âœ…
            
            *Deployment Metrics:*
            - Response Time: < 100ms
            - Error Rate: 0%
            - CPU Usage: 45%
            - Memory Usage: 60%
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}